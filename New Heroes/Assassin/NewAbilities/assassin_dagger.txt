"assassin_dagger"
{
    "AbilityBehavior"       "UNIT_TARGET | FAKE_ACTION | DOESNT_CONSUME_MOVE"
    "AbilityTeamFilter"     "TEAM_ENEMY"
    "AbilityCastRange"      "stat(%CASTER, #rangedAttackRange)"
    "AbilityCastMinRange"   "stat(%CASTER, #rangedAttackMinRange)"
    "AbilityCooldown"       "2"
    "AbilityAPCost"         "1"
    "AnimationID"           "Attack"
    "CastFXId"              "ArrowOfSorrowCastFXMega"
    "Icon"                  "BanditRangedAttack"

   
    "AbilitySpecial" 
    {
        "01"
        {
            "var_type" "FIELD_EXPRESSION"
            "RangedDmg"  "floor(stat(%CASTER, #attackDamage)/2)"
        }
    }


    "OnAbilityAction"
    {

        "TrackingProjectile"
        {
            "Target"               "%TARGET"
            "SourcePos"             "unitPosition(%SOURCE, #CastPoint)"
            "TargetPos"             "unitPosition(%TARGET, #Chest)"
            "Model"                 "ArrowOfSorrowProjectile"

            "Params" 
            {
                "damage" 
                {
                    "type" "FIELD_FLOAT"
                    "value" "expr(%RangedDmg)"
                }
            }
        }
    }

    "OnProjectileHitUnit"
    {

        "Hit"
        {
            "Target" "%TARGET"
            "EffectName" "ArrowOfSorrowHitFXMega" 
            "Tags" "stringList(#PROJECTILE, #TARGETED)"

            
            "InitActions"
            {
                "AddDamage"
                {
                    "Type"          "DAMAGE_PHYSICAL"
                    "Damage"        "%damage"
                }
            }
        }
    }

    "AIConfigB"
    {
        "Selection" 
        {
            "Weight" "2.3"
            "Considerations"
            {

                "Priorizacion Por Distance mas cercano"
                {
                    "Curve" "Linear|-0.1|1|1|0"
                    "Consideration" "DistanceToTarget"
                    "Params"
                    {
                        "MaxRange" "expr(%AbilityCastRange)"  
                    }
                }
            }
        }
    }
}